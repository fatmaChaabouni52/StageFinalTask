swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger userstore
  description: A sample API that demonstrates Swagger-Express-Middleware features

consumes:
  - application/json
produces:
  - application/json

definitions:
  user:
    required:
      - name
    properties:
      name:
        type: string
        minLength: 4
        pattern: "^[a-zA-Z0-9- ]+$"
      age:
        type: integer
      address:
        $ref: "#/definitions/address"
      pass:
        type: string
  address:
    properties:
      street:
        type: string
        minLength: 1
      city:
        type: string
        minLength: 1
      state:
        type: string
        minLength: 2
        maxLength: 2
        pattern: "^[A-Z]+$"
      zipcode:
        type: integer
        minimum: 10000
        maximum: 99999

parameters:
  userName:
    name: userName
    in: path
    description: Name of the user
    required: true
    type: string

paths:
  /users:
    get:
      description: Returns all users, optionally filtered by one or more criteria
      operationId: findusers
      parameters: &userFilters
        - name: age
          in: query
          description: Filters users by age
          required: false
          type: integer
        - name: address.city
          in: query
          description: Filters users by city
          required: false
          type: string
        - name: address.state
          in: query
          description: Filters users by state
          required: false
          type: string
        - name: address.zipcode
          in: query
          description: Filters users by zip code
          required: false
          type: integer
        - name: pass
          in: query
          description: Filters users by pass
          required: false
          type: string
      responses:
        default:
          description: Returns the matching users
          schema:
            type: array
            items:
              $ref: "#/definitions/user"
          headers:
            last-modified:
              type: string
              description: The date/time that a user was last modified

    delete:
      description: Deletes all users, optionally filtered by one or more criteria
      operationId: deleteusers
      parameters: *userFilters
      responses:
        default:
          description: Returns the users that were deleted
          schema:
            type: array
            items:
              $ref: "#/definitions/user"

    post:
      description: Creates a new user in the store
      operationId: adduser
      parameters:
        - name: user
          in: body
          description: The user to add to the store
          required: true
          schema:
            $ref: "#/definitions/user"
      responses:
        201:
          description: Returns the newly-added user
          schema:
            $ref: "#/definitions/user"
          headers:
            Location:
              type: string
              description: The URL of the newly-added user

  /users/{userName}:
    parameters:
      - $ref: "#/parameters/userName"

    get:
      description: Returns a user by name
      operationId: finduserByName
      responses:
        default:
          description: Returns the user data
          schema:
            $ref: "#/definitions/user"
          headers:
            last-modified:
              type: string
              description: The date/time that the user was last modified

    delete:
      description: Deletes a single user based on the name supplied
      operationId: deleteuser
      responses:
        default:
          description: Returns the user that was deleted
          schema:
            $ref: "#/definitions/user"

    patch:
      description: Updates a user by name
      parameters:
        - name: user
          in: body
          description: The updated user info
          required: true
          schema:
            $ref: "#/definitions/user"
      responses:
        default:
          description: Returns the updated user data
          schema:
            $ref: "#/definitions/user"

  /users/{userName}/photos:
    parameters:
      - $ref: "#/parameters/userName"

    post:
      description: Upload a new user photo
      operationId: adduserPhoto
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: formData
          description: The photo ID (generated automatically)
          type: integer
          format: int32
          minimum: 1
        - name: label
          in: formData
          description: A label for the photo
          required: true
          type: string
          minLength: 1
        - name: description
          in: formData
          description: An optional description of the photo
          type: string
        - name: photo
          in: formData
          description: The user photo
          required: true
          type: file
          minLength: 1
          maxLength: 5000000  # ~5MB
      responses:
        default:
          description: Returns the photo information
          schema:
            properties:
              id:
                type: integer
                format: int32
                description: The auto-generated photo ID
              label:
                type: string
              description:
                type: string
              photo:
                type: object
                description: Information about the photo (size, file name, etc.)
          headers:
            Location:
              type: string
              description: The URL of the newly-added photo

    get:
      description: Get a list of the photos for a user
      responses:
        200:
          description: Returns the list of photos
          schema:
            type: array
            items:
              properties:
                id:
                  type: integer
                  format: int32
                  description: The auto-generated photo ID
                label:
                  type: string
                description:
                  type: string
                photo:
                  type: object
                  description: Information about the photo (size, file name, etc.)

  /users/{userName}/photos/{id}:
    parameters:
      - $ref: "#/parameters/userName"
      - name: id
        in: path
        description: The ID of the photo
        required: true
        type: integer
        format: int32

    get:
      description: Gets a user photo
      operationId: getuserPhoto
      produces:
        - image/jpeg
        - image/gif
        - image/png
        - image/bmp
      responses:
        default:
          description: Returns the user photo
          schema:
            type: file

    delete:
      description: Deletes a user photo
      operationId: deleteuserPhoto
      responses:
        default:
          description: The photo was deleted successfully

  /:
    get:
      produces:
        - text/html
      responses:
        default:
          description: The Swagger user Store homepage :)
          schema:
            type: file
            default:
              $ref: "index.html"
